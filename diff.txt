diff --git a/README.md b/README.md
index 556a0d7..98eff95 100644
--- a/README.md
+++ b/README.md
@@ -15,3 +15,13 @@
 1. See `Netflix Search Box` section of D:\Computer Science\Tutorials\Front End Masters\Abandoned\Frameworks\Asynchronous Programming with RxJS\Asynchronous Programming in JavaScript.docx.
 1. See VSCode stuff located in D:\Computer Science\NEED TO REVIEW\JavaScript\Observables 1
 1. See VSCode stuff located in D:\Computer Science\Tutorials\Front End Masters\Abandoned\JavaScript\Rethinking Asynchronous JavaScript. Specifically, `Exercises\Ex6`
+
+## Application Behavior
+
+1. A task can be started but it can only be `un-started` if the task is not completed and if the user provides an explanation.
+2. A task can be can only be `un-completed` if the user provides an explanation.
+3. A task can be paused only if it has been started and not completed.
+
+## Multi User Considerations
+
+1. For now I am going to gloss over multi-user considerations like preventing two users from starting the same task or pushing changes out from the database as they get posted so that all users are aware.
diff --git a/src/LifeHelperApp.css b/src/LifeHelperApp.css
index ca5fc05..a336811 100644
--- a/src/LifeHelperApp.css
+++ b/src/LifeHelperApp.css
@@ -46,19 +46,26 @@ header {
   gap: 10px;
 }
 
-.app .return::after {
+button.return::after {
   font-size: 30px;
   content: "\25B2";
   padding-inline-end: 10px;
 }
 
-.app .return {
+button.return {
   color: var(--primary-color);
   opacity: 0.5;
+  display: none;
 }
 
-.app .return:hover,
-.app .destroy:hover {
+button.return.visible {
+  color: var(--primary-color);
+  opacity: 0.5;
+  display: block;
+}
+
+button.return:hover,
+button.destroy:hover {
   opacity: 1;
 }
 
@@ -71,6 +78,55 @@ button {
   content: "Ã—";
 }
 
-.item-list li .toggle {
-  accent-color: #2196f3;
+/* *** using a pseudo-element to indicate the purpose of the "start" check box *** */
+/* input.toggle::before {
+  content: "Start";
+  position: relative;
+  opacity: 0;
+  color: white;
+  left: 1.5rem;
+  top: -0.7rem;
+  font-size: 0.2rem;
+}
+
+input.toggle:hover::before {
+  opacity: 1;
+  font-size: 0.6rem;
+  color: var(--primary-color);
+  transition: all 2s;
+} */
+
+/* *** using a span element to indicate the purpose of the "start" check box *** */
+div.toggle {
+  position: relative;
+}
+
+div.toggle:hover > span.hide {
+  opacity: 1;
+  font-size: 0.8rem;
+  color: var(--primary-color);
+  transition: all 1s;
+}
+
+span.hide {
+  position: absolute;
+  opacity: 0;
+  color: white;
+  left: -1.5rem;
+  font-size: 0.2rem;
+}
+
+/* Experiment with using both class and classList attributes on the same element */
+.started {
+  font-weight: bold;
+}
+
+.completed {
+  background-color: turquoise;
+}
+/* End of experiment */
+
+footer {
+  display: flex;
+  flex-direction: column;
 }
diff --git a/src/LifeHelperApp.jsx b/src/LifeHelperApp.jsx
index 216c342..1afae95 100644
--- a/src/LifeHelperApp.jsx
+++ b/src/LifeHelperApp.jsx
@@ -1,5 +1,10 @@
 import "./LifeHelperApp.css";
 import { itemFromImport } from "./objective-goal-task.jsx";
+import {
+  affectItem,
+  startedButNotCompletedCount,
+  completedCount,
+} from "./helperFunctions";
 
 import {
   Show,
@@ -10,11 +15,7 @@ import {
 } from "solid-js";
 import { useGlobalState } from "./GlobalStateProvider";
 
-import { FindParentElement } from "./helperFunctions";
-
 function LifeHelperApp(props) {
-  //   var x = itemFromImport({ item_id: 5 });
-
   var [refreshData, setRefreshData] = createSignal(0);
   var [, , dataServer] = useGlobalState();
   // parent contains an array of at most two objects.
@@ -22,10 +23,11 @@ function LifeHelperApp(props) {
   // 2) If the current view is a list of goals, then the array contains
   //    one object that identifies the objective with which they are associated.
   // 3) If the current view is a list of tasks, then the array contains two objects.
-  //    The last object contains the goals to which they are associated
+  //    The last object contains the goal to which they are associated
   //    and the first object contains the objective to which the goal in the last object is associated.
   var [parent, setParent] = createSignal([]);
   var [pageTitle, setPageTitle] = createSignal("");
+  var [visibleClassValue, setVisibleClassValue] = createSignal("");
 
   createEffect(pageTitleEffect);
 
@@ -33,6 +35,7 @@ function LifeHelperApp(props) {
     switch (props.type) {
       case "objective":
         setPageTitle("Overall Objectives");
+        setVisibleClassValue("");
         break;
       case "goal":
         setPageTitle(
@@ -40,11 +43,14 @@ function LifeHelperApp(props) {
             parent()[parent().length - 1].item_name
           }"`
         );
+        setVisibleClassValue("visible");
         break;
       case "task":
         setPageTitle(
           `Tasks to achieve goal "${parent()[parent().length - 1].item_name}"`
         );
+        setVisibleClassValue("visible");
+
         break;
       default:
         setPageTitle("Unknown Page Item");
@@ -52,21 +58,15 @@ function LifeHelperApp(props) {
   }
 
   const fetchItems = async () => {
-    // request options
+    var searchParams = "";
+    if (props.type != "objective")
+      searchParams = JSON.stringify({
+        parent_id: parent()[parent().length - 1].item_id,
+      });
 
-    var item = {};
-    if (props.type == "objective") item.item_id = 0;
-    else item.item_id = parent()[parent().length - 1].item_id;
-
-    const options = {
-      method: "POST",
-      body: JSON.stringify(item),
-      headers: {
-        "Content-Type": "application/json",
-      },
-    };
-
-    var response = await fetch(dataServer + `/get/${props.type}s`, options);
+    var response = await fetch(
+      dataServer + `/${props.type}s` + "?params=" + searchParams
+    );
     if (!response.ok) {
       alert(
         `Server Error: status is ${response.status} reason is ${response.statusText}`
@@ -78,57 +78,11 @@ function LifeHelperApp(props) {
 
   const [items] = createResource(refreshData, fetchItems);
 
-  async function affectItem(evt, affectType) {
-    // body data
-    var item;
-
-    switch (affectType) {
-      case "add":
-        item = {
-          name: evt.target.value,
-          description: `This is a description of an ${props.type}`, // TODO create a description control
-        };
-        item.item_id = parent()[parent().length - 1].item_id;
-        break;
-      case "update":
-        item = {
-          name: evt.target.value,
-          item_id: evt.target.attributes.item_id.value,
-          description: `This is a description of an ${props.type}`, // TODO create a description control
-        };
-        break;
-      case "delete":
-        var parentLi = FindParentElement(evt.target, "li");
-        item = {
-          item_id: parentLi.attributes.item_id.value,
-        };
-        break;
-    }
-
-    // request options
-    const options = {
-      method: "POST",
-      body: JSON.stringify(item),
-      headers: {
-        "Content-Type": "application/json",
-      },
-    };
-
-    // send POST request
-    var response = await fetch(
-      dataServer + `/${affectType}/${props.type}`,
-      options
-    );
-
-    if (!response.ok) {
-      alert(
-        `Server Error: status is ${response.status} reason is ${response.statusText}`
-      );
-    } else {
-      setRefreshData((refreshData() + 1) % 2);
-      evt.target.value = "";
-    }
-  }
+  //   var startedCount = createMemo(
+  //     items().reduce((item, totalStarted) => {
+  //       if (item.started_dtm) totalStarted++;
+  //     })
+  //   );
 
   function returnToParent() {
     setParent(() => {
@@ -154,11 +108,24 @@ function LifeHelperApp(props) {
       <header>
         <div class="header-title">
           <h1 class={`${props.type}_header`}>{pageTitle()}</h1>
-          <button class="return" onClick={returnToParent}></button>
+          <button
+            class={`return ${visibleClassValue()}`}
+            onClick={returnToParent}
+          ></button>
         </div>
         <input
           class="new-item"
-          onChange={(e) => affectItem(e, "add")}
+          onChange={(e) => {
+            affectItem(
+              e,
+              "add",
+              parent().length == 0 ? 0 : parent()[parent().length - 1].item_id,
+              props.type,
+              dataServer,
+              refreshData,
+              setRefreshData
+            );
+          }}
           placeholder={`Enter ${props.type}`}
         />
       </header>
@@ -175,13 +142,25 @@ function LifeHelperApp(props) {
                   setParent,
                   parent,
                   setRefreshData,
-                  refreshData
+                  refreshData,
+                  dataServer
                 )
               }
             </For>
           </ul>
         </Show>
       )}
+      <footer>
+        <span>{`Total items: ${
+          items.state == "ready" && items().length
+        }`}</span>
+        <span>{`Started but not completed items: ${
+          items.state == "ready" && startedButNotCompletedCount(items)
+        }`}</span>
+        <span>{`Completed items: ${
+          items.state == "ready" && completedCount(items)
+        }`}</span>
+      </footer>
     </section>
   );
 }
diff --git a/src/helperFunctions.js b/src/helperFunctions.js
index e1074e6..8353178 100644
--- a/src/helperFunctions.js
+++ b/src/helperFunctions.js
@@ -4,3 +4,85 @@ export function FindParentElement(currentElement, parentType) {
   if (currentElement.localName == parentType) return currentElement;
   else return FindParentElement(currentElement.parentElement, parentType);
 }
+
+export async function affectItem(
+  evt,
+  affectType,
+  item_id,
+  item_type,
+  dataServer,
+  refreshData,
+  setRefreshData
+) {
+  // body data
+  var item;
+  var endPoint;
+
+  switch (affectType) {
+    case "add":
+      item = {
+        parent_id: item_id,
+        name: evt.target.value,
+        description: `This is a description of a ${item_type}`, // TODO create a description control
+      };
+      endPoint = `/${affectType}/${item_type}`;
+      // item.item_id = parent()[parent().length - 1].item_id;
+      break;
+    case "start":
+      item = {
+        task_id: item_id,
+      };
+      endPoint = `/${affectType}`;
+      break;
+    case "update":
+      item = {
+        name: evt.target.value,
+        item_id: evt.target.attributes.item_id.value,
+        description: `This is a description of a ${item_type}`, // TODO create a description control
+      };
+      break;
+    case "delete":
+      var parentLi = FindParentElement(evt.target, "li");
+      item = {
+        item_id: parentLi.attributes.item_id.value,
+      };
+      break;
+  }
+
+  // request options
+  const options = {
+    method: "POST",
+    body: JSON.stringify(item),
+    headers: {
+      "Content-Type": "application/json",
+    },
+  };
+
+  // send POST request
+  var response = await fetch(dataServer + endPoint, options);
+
+  if (!response.ok) {
+    alert(
+      `Server Error: status is ${response.status} reason is ${response.statusText}`
+    );
+    return false;
+  } else {
+    evt.target.value = "";
+    setRefreshData((refreshData() + 1) % 2);
+    return true;
+  }
+}
+
+export function startedButNotCompletedCount(items) {
+  return items().reduce((totalStarted, item) => {
+    if (item.started_dtm && !item.completed_dtm) return totalStarted + 1;
+    else return totalStarted;
+  }, 0);
+}
+
+export function completedCount(items) {
+  return items().reduce((totalStarted, item) => {
+    if (item.completed_dtm) return totalStarted + 1;
+    else return totalStarted;
+  }, 0);
+}
diff --git a/src/objective-goal-task.jsx b/src/objective-goal-task.jsx
index 223db17..e9d6c7b 100644
--- a/src/objective-goal-task.jsx
+++ b/src/objective-goal-task.jsx
@@ -1,13 +1,16 @@
 import { FindParentElement } from "./helperFunctions";
+import { affectItem } from "./helperFunctions";
 
 export function itemFromImport(
-  item,
-  props,
-  setParent,
-  parent,
-  setRefreshData,
-  refreshData
+  item /* used in LifeHelperApp */,
+  props /* used in LifeHelperApp */,
+  setParent /* used in LifeHelperApp */,
+  parent /* used in LifeHelperApp */,
+  setRefreshData /* used in LifeHelperApp */,
+  refreshData /* used in LifeHelperApp */,
+  dataServer /* used in LifeHelperApp */
 ) {
+  console.log(`In itemFromImport rendering item with name ${item.item_name}`);
   return (
     <li
       class="item"
@@ -30,15 +33,36 @@ export function itemFromImport(
         setRefreshData((refreshData() + 1) % 2);
       }}
     >
-      {/* <div class="view"> */}
-      {props.type == "task" ? (
-        <input type="checkbox" class="toggle"></input>
-      ) : (
-        <input type="checkbox" class="toggle" disabled></input>
-      )}
-      <label>{item.item_name}</label>
+      <div class="toggle">
+        {props.type == "task" ? (
+          <input
+            type="checkbox"
+            class="toggle"
+            onClick={(e) =>
+              affectItem(
+                e,
+                "start",
+                item.item_id,
+                1,
+                dataServer,
+                refreshData,
+                setRefreshData
+              )
+            }
+            disabled={item.completed_dtm}
+            checked={item.started_dtm}
+          ></input>
+        ) : (
+          <input type="checkbox" class="toggle" disabled></input>
+        )}
+        <span class="hide">Start</span>
+      </div>
+      <label
+        classList={{ completed: item.completed_dtm, started: item.started_dtm }}
+      >
+        {item.item_name}
+      </label>
       <button class="destroy" onClick={(e) => affectItem(e, "delete")} />
-      {/* </div> */}
     </li>
   );
 }
